name: Deploy AWS Propuestas v2

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
        - prod
        - dev
        - staging

env:
  AWS_REGION: us-east-1
  SAM_CLI_TELEMETRY: 0

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Build frontend
      run: npm run build
    
    - name: Lint code
      run: npm run lint

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Validate SAM template
      run: |
        cd infrastructure
        sam validate
    
    - name: Build SAM application
      run: |
        cd infrastructure
        sam build --use-container
    
    - name: Deploy SAM application
      run: |
        cd infrastructure
        sam deploy \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset \
          --stack-name aws-propuestas-v2-${{ github.event.inputs.environment || 'prod' }} \
          --parameter-overrides Environment=${{ github.event.inputs.environment || 'prod' }} \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }}
    
    - name: Get API Gateway URL
      id: get-api-url
      run: |
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name aws-propuestas-v2-${{ github.event.inputs.environment || 'prod' }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
          --output text \
          --region ${{ env.AWS_REGION }})
        echo "api-url=$API_URL" >> $GITHUB_OUTPUT
        echo "API Gateway URL: $API_URL"
    
    - name: Test API Health
      run: |
        sleep 30  # Wait for deployment to stabilize
        curl -f ${{ steps.get-api-url.outputs.api-url }}/health || exit 1
        echo "‚úÖ API Health check passed"

  deploy-frontend:
    needs: [test, deploy-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get API Gateway URL
      id: get-api-url
      run: |
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name aws-propuestas-v2-${{ github.event.inputs.environment || 'prod' }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
          --output text \
          --region ${{ env.AWS_REGION }})
        echo "api-url=$API_URL" >> $GITHUB_OUTPUT
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build frontend with API URL
      env:
        NEXT_PUBLIC_API_URL: ${{ steps.get-api-url.outputs.api-url }}
      run: npm run build
    
    - name: Deploy to AWS Amplify
      run: |
        # Install Amplify CLI
        npm install -g @aws-amplify/cli
        
        # Configure Amplify
        amplify configure --usage-data-off
        
        # Initialize Amplify project
        amplify init --yes --amplify '{
          "projectName": "aws-propuestas-v2",
          "envName": "${{ github.event.inputs.environment || 'prod' }}",
          "defaultEditor": "code"
        }' --providers '{
          "awscloudformation": {
            "configLevel": "project",
            "useProfile": false,
            "accessKeyId": "${{ secrets.AWS_ACCESS_KEY_ID }}",
            "secretAccessKey": "${{ secrets.AWS_SECRET_ACCESS_KEY }}",
            "region": "${{ env.AWS_REGION }}"
          }
        }'
        
        # Add hosting
        amplify add hosting --headless --type manual
        
        # Publish
        amplify publish --yes
    
    - name: Get Amplify URL
      run: |
        AMPLIFY_URL=$(amplify status --json | jq -r '.hosting.S3AndCloudFront.CloudFrontDistribution')
        echo "üöÄ Frontend deployed to: https://$AMPLIFY_URL"

  integration-tests:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get API Gateway URL
      id: get-api-url
      run: |
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name aws-propuestas-v2-${{ github.event.inputs.environment || 'prod' }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
          --output text \
          --region ${{ env.AWS_REGION }})
        echo "api-url=$API_URL" >> $GITHUB_OUTPUT
    
    - name: Run Integration Tests
      run: |
        echo "üß™ Running integration tests..."
        
        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f ${{ steps.get-api-url.outputs.api-url }}/health
        
        # Test arquitecto endpoint
        echo "Testing arquitecto endpoint..."
        curl -X POST ${{ steps.get-api-url.outputs.api-url }}/arquitecto \
          -H "Content-Type: application/json" \
          -d '{"messages": [{"role": "user", "content": "Hello test"}]}' \
          --max-time 30
        
        # Test chat endpoint
        echo "Testing chat endpoint..."
        curl -X POST ${{ steps.get-api-url.outputs.api-url }}/chat \
          -H "Content-Type: application/json" \
          -d '{"messages": [{"role": "user", "content": "Hello test"}]}' \
          --max-time 30
        
        echo "‚úÖ All integration tests passed!"

  notify:
    needs: [deploy-backend, deploy-frontend, integration-tests]
    runs-on: ubuntu-latest
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Notify Success
      if: needs.deploy-backend.result == 'success' && needs.deploy-frontend.result == 'success'
      run: |
        echo "üéâ Deployment successful!"
        echo "Environment: ${{ github.event.inputs.environment || 'prod' }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
    
    - name: Notify Failure
      if: needs.deploy-backend.result == 'failure' || needs.deploy-frontend.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Environment: ${{ github.event.inputs.environment || 'prod' }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        exit 1
